def is_prime(n):\n\tif n <= 1:\n\t\treturn False\n\tfor i in range(2, int(n**0.5)+1):\n\t\tif n % i == 0:\n\t\t\treturn False\n\treturn True,

def factorial(n):\n\tif n == 0:\n\t\treturn 1\n\telse:\n\t\treturn n * factorial(n-1),

def binary_search(arr, x):\n\tlow = 0\n\thigh = len(arr) - 1\n\tmid = 0\n\twhile low <= high:\n\t\tmid = (high + low) // 2\n\t\tif arr[mid] < x:\n\t\t\tlow = mid + 1\n\t\telif arr[mid] > x:\n\t\t\thigh = mid - 1\n\t\telse:\n\t\t\treturn mid\n\treturn -1,

def bubble_sort(arr):\n\tn = len(arr)\n\tfor i in range(n):\n\t\tfor j in range(0, n-i-1):\n\t\t\tif arr[j] > arr[j+1] :\n\t\t\t\tarr[j], arr[j+1] = arr[j+1], arr[j],

def quick_sort(arr):\n\tif len(arr) <= 1:\n\t\treturn arr\n\tpivot = arr[len(arr)//2]\n\tleft = [x for x in arr if x < pivot]\n\tmiddle = [x for x in arr if x == pivot]\n\tright = [x for x in arr if x > pivot]\n\treturn quick_sort(left) + middle + quick_sort(right),

def fib(n):\n\tif n <= 1:\n\t\treturn n\n\telse:\n\t\treturn(fib(n-1) + fib(n-2)),

def gcd(a, b):\n\twhile b:\n\t\ta, b = b, a % b\n\treturn a,

def lcm(a, b):\n\treturn a * b // gcd(a, b),

def insertion_sort(arr):\n\tfor i in range(1, len(arr)):\n\t\tkey = arr[i]\n\t\tj = i-1\n\t\twhile j >=0 and key < arr[j] :\n\t\t\tarr[j+1] = arr[j]\n\t\t\tj -= 1\n\t\tarr[j+1] = key,

def selection_sort(arr):\n\tfor i in range(len(arr)):\n\t\tmin_idx = i\n\t\tfor j in range(i+1, len(arr)):\n\t\t\tif arr[min_idx] > arr[j]:\n\t\t\t\tmin_idx = j\n\t\tarr[i], arr[min_idx] = arr[min_idx], arr[i],

def power(x, y):\n\tres = 1\n\twhile (y > 0):\n\t\tif (y & 1):\n\t\t\tres = res * x\n\t\ty = y >> 1\n\t\tx = x * x\n\treturn res,

def binary_to_decimal(binary):\n\tdecimal, i, n = 0, 0, 0\n\twhile(binary != 0):\n\t\tn = binary % 10\n\t\tdecimal = decimal + n * pow(2, i)\n\t\tbinary = binary//10\n\t\ti += 1\n\treturn decimal,

def decimal_to_binary(n):\n\tif n > 1:\n\t\tdecimal_to_binary(n//2)\n\tprint(n % 2,end = ''),

def linear_search(arr, x):\n\tfor i in range(len(arr)):\n\t\tif arr[i] == x:\n\t\t\treturn i\n\treturn -1,

def armstrong_number(n):\n\tnum = n\n\torder = len(str(num))\n\tsum = 0\n\twhile num > 0:\n\t\tdigit = num % 10\n\t\tsum += digit ** order\n\t\tnum //= 10\n\treturn n == sum,

def leap_year(year):\n\treturn year % 4 == 0 and (year % 100 != 0 or year % 400 == 0),

def find_factors(n):\n\tfactors = []\n\tfor i in range(1, n + 1):\n\t\tif n % i == 0:\n\t\t\tfactors.append(i)\n\treturn factors
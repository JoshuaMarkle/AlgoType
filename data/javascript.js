const words = [
    "if",
    "for",
    "else",
    "switch",
    "case",
    "default",
    "break",
    "continue",
    "while",
    "do",
    "function",
    "return",
    "var",
    "let",
    "const",
    "new",
    "class",
    "extends",
    "super",
    "this",
    "import",
    "export",
    "null",
    "true",
    "false",
    "try",
    "catch",
    "finally",
    "throw",
    "typeof",
    "instanceof",
    "delete",
    "void",
    "async",
    "await",
    "yield",
    "from",
    "select",
    "static",
    "get",
    "set",
    "constructor",
    "prototype",
    "push",
    "pop",
    "shift",
    "unshift",
    "map",
    "filter",
    "reduce",
    "find",
    "every",
    "some",
    "slice",
    "splice",
    "join",
    "reverse",
    "sort",
    "indexOf",
    "lastIndexOf",
    "includes",
    "toString",
    "length",
    "charAt",
    "charCodeAt",
    "concat",
    "match",
    "replace",
    "search",
    "split",
    "substring",
    "toLowerCase",
    "toUpperCase",
    "trim",
    "eval",
    "parse",
    "stringify",
    "Date",
    "Array",
    "Object",
    "Number",
    "Math",
    "RegExp",
    "JSON",
    "Promise",
    "Symbol",
    "Set",
    "Map",
    "WeakSet",
    "WeakMap",
    "Int8Array",
    "Uint8Array",
    "Uint8ClampedArray",
    "Int16Array",
    "Uint16Array",
    "Int32Array",
    "Uint32Array",
    "Float32Array",
    "Float64Array",
    "BigInt64Array",
    "BigUint64Array",
    "ArrayBuffer",
    "SharedArrayBuffer",
    "Atomics",
    "DataView",
    "console",
    "window",
    "document",
    "localStorage",
    "sessionStorage",
    "fetch",
    "XMLHttpRequest",
    "addEventListener",
    "removeEventListener",
    "setTimeout",
    "clearTimeout",
    "setInterval",
    "clearInterval",
    "requestAnimationFrame",
    "cancelAnimationFrame",
    "create",
    "defineProperty",
    "keys",
    "values",
    "entries",
    "hasOwnProperty",
    "isPrototypeOf",
    "propertyIsEnumerable",
    "alert",
    "confirm",
    "prompt",
    "innerHeight",
    "innerWidth",
    "outerHeight",
    "outerWidth",
    "pageXOffset",
    "pageYOffset",
    "screenX",
    "screenY",
    "screenLeft",
    "screenTop",
    "scroll",
    "scrollTo",
    "scrollBy",
    "getComputedStyle",
    "getElementsByClassName",
    "getElementsByTagName",
    "getElementById",
    "querySelector",
    "querySelectorAll",
    "createElement",
    "createTextNode",
    "createDocumentFragment",
    "addEventListener",
    "removeEventListener",
    "dispatchEvent",
    "Node",
    "Element",
    "Text",
    "Document",
    "Comment",
    "DocumentFragment",
    "ShadowRoot",
    "Event",
    "CustomEvent",
    "MouseEvent",
    "KeyboardEvent",
    "FocusEvent",
    "WheelEvent",
    "TouchEvent",
    "ProgressEvent",
    "FormData",
    "FileReader",
    "Blob",
    "URL",
    "WebSocket",
    "ServerSentEvent",
    "StorageEvent",
    "ClipboardEvent",
    "MediaQueryList",
    "MediaQueryListEvent",
    "Navigator",
    "Location",
    "History",
    "Screen",
    "Performance",
    "crypto",
    "WebGLContextEvent",
    "SVGElement",
    "requestIdleCallback",
    "cancelIdleCallback",
    "indexedDB",
    "WebAssembly",
    "encodeURI",
    "encodeURIComponent",
    "decodeURI",
    "decodeURIComponent"
];


const algorithms = [
    "function is_prime(n) {\n\tif (n <= 1) {\n\t\treturn false;\n\t}\n\tfor (let i = 2; i <= Math.sqrt(n); i++) {\n\t\tif (n % i === 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "function factorial(n) {\n\tif (n === 0) {\n\t\treturn 1;\n\t} else {\n\t\treturn n * factorial(n - 1);\n\t}\n}",
    "function reverse_string(s) {\n\tlet str_list = s.split('');\n\tlet start_index = 0;\n\tlet end_index = s.length - 1;\n\twhile (start_index < end_index) {\n\t\t[str_list[start_index], str_list[end_index]] = [str_list[end_index], str_list[start_index]];\n\t\tstart_index++;\n\t\tend_index--;\n\t}\n\treturn str_list.join('');\n}",
    "function binary_search(arr, x) {\n\tlet low = 0;\n\tlet high = arr.length - 1;\n\tlet mid = 0;\n\twhile (low <= high) {\n\t\tmid = Math.floor((high + low) / 2);\n\t\tif (arr[mid] < x) {\n\t\t\tlow = mid + 1;\n\t\t} else if (arr[mid] > x) {\n\t\t\thigh = mid - 1;\n\t\t} else {\n\t\t\treturn mid;\n\t\t}\n\t}\n\treturn -1;\n}",
    "function bubble_sort(arr) {\n\tlet n = arr.length;\n\tfor (let i = 0; i < n; i++) {\n\t\tfor (let j = 0; j < n - i - 1; j++) {\n\t\t\tif (arr[j] > arr[j + 1]) {\n\t\t\t\t[arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n\t\t\t}\n\t\t}\n\t}\n}"
];

export { words, algorithms };
const words = [
    "abstract",
    "as",
    "base",
    "bool",
    "break",
    "byte",
    "case",
    "catch",
    "char",
    "checked",
    "class",
    "const",
    "continue",
    "decimal",
    "default",
    "delegate",
    "do",
    "double",
    "else",
    "enum",
    "event",
    "explicit",
    "extern",
    "false",
    "finally",
    "fixed",
    "float",
    "for",
    "foreach",
    "goto",
    "if",
    "implicit",
    "in",
    "int",
    "interface",
    "internal",
    "is",
    "lock",
    "long",
    "namespace",
    "new",
    "null",
    "object",
    "operator",
    "out",
    "override",
    "params",
    "private",
    "protected",
    "public",
    "readonly",
    "ref",
    "return",
    "sbyte",
    "sealed",
    "short",
    "sizeof",
    "stackalloc",
    "static",
    "string",
    "struct",
    "switch",
    "this",
    "throw",
    "true",
    "try",
    "typeof",
    "uint",
    "ulong",
    "unchecked",
    "unsafe",
    "ushort",
    "using",
    "virtual",
    "void",
    "volatile",
    "while"
];

const algorithms = [
    `int Factorial(int n) {\n\tif (n == 0) return 1;\n\treturn n * Factorial(n - 1);\n}`,
    `string ReverseString(string s) {\n\tint startIndex = 0;\n\tint endIndex = s.Length - 1;\n\twhile (startIndex < endIndex) {\n\t\tchar temp = s[startIndex];\n\t\ts[startIndex] = s[endIndex];\n\t\ts[endIndex] = temp;\n\t\tstartIndex++;\n\t\tendIndex--;\n\t}\n\treturn s;\n}`,
    `int BinarySearch(List<int> arr, int x) {\n\tint low = 0;\n\tint high = arr.Count - 1;\n\tint mid;\n\twhile (low <= high) {\n\t\tmid = low + (high - low) / 2;\n\t\tif (arr[mid] < x) {\n\t\t\tlow = mid + 1;\n\t\t} else if (arr[mid] > x) {\n\t\t\thigh = mid - 1;\n\t\t} else {\n\t\t\treturn mid;\n\t\t}\n\t}\n\treturn -1;\n}`,
    `void BubbleSort(List<int> arr) {\n\tint n = arr.Count;\n\tfor (int i = 0; i < n - 1; ++i) {\n\t\tfor (int j = 0; j < n - i - 1; ++j) {\n\t\t\tif (arr[j] > arr[j + 1]) {\n\t\t\t\tint temp = arr[j];\n\t\t\t\tarr[j] = arr[j + 1];\n\t\t\t\tarr[j + 1] = temp;\n\t\t\t}\n\t\t}\n\t}\n}`,
    `void QuickSort(List<int> arr) {\n\tif (arr.Count <= 1) return;\n\tint pivot = arr[arr.Count / 2];\n\tList<int> left = new List<int>();\n\tList<int> right = new List<int>();\n\tList<int> middle = new List<int>();\n\tforeach (int i in arr) {\n\t\tif (i < pivot) left.Add(i);\n\t\telse if (i == pivot) middle.Add(i);\n\t\telse right.Add(i);\n\t}\n\tQuickSort(left);\n\tQuickSort(right);\n\tarr.Clear();\n\tarr.AddRange(left);\n\tarr.AddRange(middle);\n\tarr.AddRange(right);\n}`
  ];  

export { words, algorithms };
